// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RH.EntityFramework.Shared.DbContexts;

namespace RH.EntityFramework.Shared.Migrations
{
    [DbContext(typeof(WeatherDbContext))]
    [Migration("20220128133038_ecmwfDefaultLevel")]
    partial class ecmwfDefaultLevel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.6");

            modelBuilder.Entity("RH.EntityFramework.Shared.Entities.Cycle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("Compeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("dateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Cycles");
                });

            modelBuilder.Entity("RH.EntityFramework.Shared.Entities.Dimension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<short>("X")
                        .HasColumnType("smallint");

                    b.Property<short>("Y")
                        .HasColumnType("smallint");

                    b.Property<short>("Zoom")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Dimensions");
                });

            modelBuilder.Entity("RH.EntityFramework.Shared.Entities.Ecmwf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("DataString")
                        .HasColumnType("longtext");

                    b.Property<int>("DimensionId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WindyTimeId")
                        .HasColumnType("int");

                    b.Property<double>("X")
                        .HasColumnType("double");

                    b.Property<double>("Y")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("DimensionId");

                    b.HasIndex("WindyTimeId");

                    b.ToTable("Ecmwfs");
                });

            modelBuilder.Entity("RH.EntityFramework.Shared.Entities.EcmwfForecast", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("ConvPrecip")
                        .HasColumnType("double");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("DewPoint")
                        .HasColumnType("double");

                    b.Property<double>("Gust")
                        .HasColumnType("double");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint unsigned");

                    b.Property<double>("Mm")
                        .HasColumnType("double");

                    b.Property<long>("OrigTs")
                        .HasColumnType("bigint");

                    b.Property<double>("Pressure")
                        .HasColumnType("double");

                    b.Property<bool>("Rain")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ReferenceTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Rh")
                        .HasColumnType("int");

                    b.Property<bool>("Snow")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("SnowPrecip")
                        .HasColumnType("double");

                    b.Property<double>("Temperature")
                        .HasColumnType("double");

                    b.Property<string>("WeatherCode")
                        .HasColumnType("longtext");

                    b.Property<double>("Wind")
                        .HasColumnType("double");

                    b.Property<int>("WindDimensionId")
                        .HasColumnType("int");

                    b.Property<int>("WindDirection")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WindDimensionId");

                    b.ToTable("EcmwfForecasts");
                });

            modelBuilder.Entity("RH.EntityFramework.Shared.Entities.Gfs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("DataString")
                        .HasColumnType("longtext");

                    b.Property<int>("DimensionId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WindyTimeId")
                        .HasColumnType("int");

                    b.Property<double>("X")
                        .HasColumnType("double");

                    b.Property<double>("Y")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("DimensionId");

                    b.HasIndex("WindyTimeId");

                    b.ToTable("Gfses");
                });

            modelBuilder.Entity("RH.EntityFramework.Shared.Entities.GfsForecast", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("ConvPrecip")
                        .HasColumnType("double");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("DewPoint")
                        .HasColumnType("double");

                    b.Property<double>("Gust")
                        .HasColumnType("double");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint unsigned");

                    b.Property<double>("Mm")
                        .HasColumnType("double");

                    b.Property<long>("OrigTs")
                        .HasColumnType("bigint");

                    b.Property<double>("Pressure")
                        .HasColumnType("double");

                    b.Property<bool>("Rain")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ReferenceTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Rh")
                        .HasColumnType("int");

                    b.Property<bool>("Snow")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("SnowPrecip")
                        .HasColumnType("double");

                    b.Property<double>("Temperature")
                        .HasColumnType("double");

                    b.Property<string>("WeatherCode")
                        .HasColumnType("longtext");

                    b.Property<double>("Wind")
                        .HasColumnType("double");

                    b.Property<int>("WindDimensionId")
                        .HasColumnType("int");

                    b.Property<int>("WindDirection")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WindDimensionId");

                    b.ToTable("GfsForecasts");
                });

            modelBuilder.Entity("RH.EntityFramework.Shared.Entities.Label", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DimensionId")
                        .HasColumnType("int");

                    b.Property<int>("ExtraField1")
                        .HasColumnType("int");

                    b.Property<int>("ExtraField2")
                        .HasColumnType("int");

                    b.Property<string>("FullText")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("O")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<double>("X")
                        .HasColumnType("double");

                    b.Property<double>("Y")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("DimensionId");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("RH.EntityFramework.Shared.Entities.SystemSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CrawlingInterval")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("SystemSettings");
                });

            modelBuilder.Entity("RH.EntityFramework.Shared.Entities.WindDimension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("X")
                        .HasColumnType("double");

                    b.Property<double>("Y")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("WindDimensions");
                });

            modelBuilder.Entity("RH.EntityFramework.Shared.Entities.WindyTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long>("Start")
                        .HasColumnType("bigint");

                    b.Property<short>("Step")
                        .HasColumnType("smallint");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("WindyTimes");
                });

            modelBuilder.Entity("RH.EntityFramework.Shared.Entities.Ecmwf", b =>
                {
                    b.HasOne("RH.EntityFramework.Shared.Entities.Dimension", "Dimension")
                        .WithMany()
                        .HasForeignKey("DimensionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RH.EntityFramework.Shared.Entities.WindyTime", "WindyTime")
                        .WithMany()
                        .HasForeignKey("WindyTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dimension");

                    b.Navigation("WindyTime");
                });

            modelBuilder.Entity("RH.EntityFramework.Shared.Entities.EcmwfForecast", b =>
                {
                    b.HasOne("RH.EntityFramework.Shared.Entities.WindDimension", "WindDimension")
                        .WithMany()
                        .HasForeignKey("WindDimensionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WindDimension");
                });

            modelBuilder.Entity("RH.EntityFramework.Shared.Entities.Gfs", b =>
                {
                    b.HasOne("RH.EntityFramework.Shared.Entities.Dimension", "Dimension")
                        .WithMany()
                        .HasForeignKey("DimensionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RH.EntityFramework.Shared.Entities.WindyTime", "WindyTime")
                        .WithMany()
                        .HasForeignKey("WindyTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dimension");

                    b.Navigation("WindyTime");
                });

            modelBuilder.Entity("RH.EntityFramework.Shared.Entities.GfsForecast", b =>
                {
                    b.HasOne("RH.EntityFramework.Shared.Entities.WindDimension", "WindDimension")
                        .WithMany()
                        .HasForeignKey("WindDimensionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WindDimension");
                });

            modelBuilder.Entity("RH.EntityFramework.Shared.Entities.Label", b =>
                {
                    b.HasOne("RH.EntityFramework.Shared.Entities.Dimension", "Dimension")
                        .WithMany("Labels")
                        .HasForeignKey("DimensionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dimension");
                });

            modelBuilder.Entity("RH.EntityFramework.Shared.Entities.SystemSettings", b =>
                {
                    b.OwnsOne("RH.EntityFramework.Shared.Entities.BaseWorkerSetting", "BaseWorkerSetting", b1 =>
                        {
                            b1.Property<int>("SystemSettingsId")
                                .HasColumnType("int");

                            b1.Property<bool>("ReCrawlLabel")
                                .HasColumnType("tinyint(1)");

                            b1.Property<bool>("ReCrawlTileImage")
                                .HasColumnType("tinyint(1)");

                            b1.Property<bool>("RegenerateDimension")
                                .HasColumnType("tinyint(1)");

                            b1.Property<bool>("RegenerateWindDimension")
                                .HasColumnType("tinyint(1)");

                            b1.HasKey("SystemSettingsId");

                            b1.ToTable("SystemSettings");

                            b1.WithOwner()
                                .HasForeignKey("SystemSettingsId");
                        });

                    b.OwnsOne("RH.EntityFramework.Shared.Entities.CrawlWebPath", "CrawlWebPath", b1 =>
                        {
                            b1.Property<int>("SystemSettingsId")
                                .HasColumnType("int");

                            b1.Property<string>("ForecastCityTileECMWF")
                                .HasColumnType("longtext");

                            b1.Property<string>("ForecastCityTileGFS")
                                .HasColumnType("longtext");

                            b1.Property<string>("ForecastWindECMWF")
                                .HasColumnType("longtext");

                            b1.Property<string>("ForecastWindGFS")
                                .HasColumnType("longtext");

                            b1.Property<string>("ForecastWindGFSLevel")
                                .HasColumnType("longtext");

                            b1.Property<string>("ForecastWindGFSLevelKeys")
                                .HasColumnType("longtext");

                            b1.Property<string>("LabelPath")
                                .HasColumnType("longtext");

                            b1.Property<string>("TileDirectoryPath")
                                .HasColumnType("longtext");

                            b1.Property<string>("TileWebPath")
                                .HasColumnType("longtext");

                            b1.HasKey("SystemSettingsId");

                            b1.ToTable("SystemSettings");

                            b1.WithOwner()
                                .HasForeignKey("SystemSettingsId");
                        });

                    b.OwnsOne("RH.EntityFramework.Shared.Entities.DimensionsSetting", "Dimension", b1 =>
                        {
                            b1.Property<int>("SystemSettingsId")
                                .HasColumnType("int");

                            b1.Property<int>("MaxZoom")
                                .HasColumnType("int");

                            b1.Property<int>("MinZoom")
                                .HasColumnType("int");

                            b1.HasKey("SystemSettingsId");

                            b1.ToTable("SystemSettings");

                            b1.WithOwner()
                                .HasForeignKey("SystemSettingsId");

                            b1.OwnsOne("RH.EntityFramework.Shared.Entities.SettingPoint", "BottomRight", b2 =>
                                {
                                    b2.Property<int>("DimensionsSettingSystemSettingsId")
                                        .HasColumnType("int");

                                    b2.Property<int>("X")
                                        .HasColumnType("int");

                                    b2.Property<int>("Y")
                                        .HasColumnType("int");

                                    b2.HasKey("DimensionsSettingSystemSettingsId");

                                    b2.ToTable("SystemSettings");

                                    b2.WithOwner()
                                        .HasForeignKey("DimensionsSettingSystemSettingsId");
                                });

                            b1.OwnsOne("RH.EntityFramework.Shared.Entities.SettingPoint", "TopLeft", b2 =>
                                {
                                    b2.Property<int>("DimensionsSettingSystemSettingsId")
                                        .HasColumnType("int");

                                    b2.Property<int>("X")
                                        .HasColumnType("int");

                                    b2.Property<int>("Y")
                                        .HasColumnType("int");

                                    b2.HasKey("DimensionsSettingSystemSettingsId");

                                    b2.ToTable("SystemSettings");

                                    b2.WithOwner()
                                        .HasForeignKey("DimensionsSettingSystemSettingsId");
                                });

                            b1.Navigation("BottomRight");

                            b1.Navigation("TopLeft");
                        });

                    b.OwnsOne("RH.EntityFramework.Shared.Entities.WindDimensionsSetting", "WindDimensions", b1 =>
                        {
                            b1.Property<int>("SystemSettingsId")
                                .HasColumnType("int");

                            b1.Property<int>("XInterval")
                                .HasColumnType("int");

                            b1.Property<int>("YInterval")
                                .HasColumnType("int");

                            b1.HasKey("SystemSettingsId");

                            b1.ToTable("SystemSettings");

                            b1.WithOwner()
                                .HasForeignKey("SystemSettingsId");

                            b1.OwnsOne("RH.EntityFramework.Shared.Entities.SettingPoint", "BottomRight", b2 =>
                                {
                                    b2.Property<int>("WindDimensionsSettingSystemSettingsId")
                                        .HasColumnType("int");

                                    b2.Property<int>("X")
                                        .HasColumnType("int");

                                    b2.Property<int>("Y")
                                        .HasColumnType("int");

                                    b2.HasKey("WindDimensionsSettingSystemSettingsId");

                                    b2.ToTable("SystemSettings");

                                    b2.WithOwner()
                                        .HasForeignKey("WindDimensionsSettingSystemSettingsId");
                                });

                            b1.OwnsOne("RH.EntityFramework.Shared.Entities.SettingPoint", "TopLeft", b2 =>
                                {
                                    b2.Property<int>("WindDimensionsSettingSystemSettingsId")
                                        .HasColumnType("int");

                                    b2.Property<int>("X")
                                        .HasColumnType("int");

                                    b2.Property<int>("Y")
                                        .HasColumnType("int");

                                    b2.HasKey("WindDimensionsSettingSystemSettingsId");

                                    b2.ToTable("SystemSettings");

                                    b2.WithOwner()
                                        .HasForeignKey("WindDimensionsSettingSystemSettingsId");
                                });

                            b1.Navigation("BottomRight");

                            b1.Navigation("TopLeft");
                        });

                    b.Navigation("BaseWorkerSetting");

                    b.Navigation("CrawlWebPath");

                    b.Navigation("Dimension");

                    b.Navigation("WindDimensions");
                });

            modelBuilder.Entity("RH.EntityFramework.Shared.Entities.Dimension", b =>
                {
                    b.Navigation("Labels");
                });
#pragma warning restore 612, 618
        }
    }
}
